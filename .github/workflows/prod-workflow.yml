# This is a basic workflow to help you get started with Actions

name: production build and deploy

# Controls when the workflow will run
on:
  # # Triggers the workflow on push or pull request events

  # # push:
  # #   branches: 
  # #     - 'feature/*'
  # #     - 'bug/*'

  # pull_request:
  #   types: 
  #     - opened
  #     - closed
  #     # - labeled
  #     # - synchronize
  
  #   branches: 
  #     - main
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build_dev:
  #   name: deploy to dev
  #   if: github.event_name == 'pull_request' 
  #   # if: startsWith(github.head_ref, 'feature/')
  #   # if: github.event.pull_request.merged == false || github.event_name == 'push' 
  #   env:
  #     env: dev
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Authenticate with AWS
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init -reconfigure -backend-config="key=workflow-$env"

  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -var "env=$env"

  # build_stage:
  #   name: deploy to stage
  #   # if: github.event.ref == 'refs/heads/main'
  #   # if: github.event.label.name == 'stage' || github.event.label.name == 'prod'
  #   # if: contains(fromJson('[ "pull_request"]'), github.event_name) && github.event.pull_request.merged == true
  #   if: github.event.pull_request.merged == true
  #   # if: contains(toJson(github.event.pull_request.labels.*.name), 'stage') || github.event.label.name == 'stage'
  #   # if:  startsWith(github.head_ref, 'feature/') && github.event.label.name == 'stage'
  #   # needs: build_dev
  #   runs-on: ubuntu-latest
  #   env:
  #     env: stage
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1

  #     - name: Checkout
  #       uses: actions/checkout@v3        
      
  #     - name: Terraform Init
  #       id: init
  #       run: terraform init -reconfigure -backend-config="key=workflow-$env"


  build_prod:
    name: deploy to prod
    # needs: build_stage
    runs-on: ubuntu-latest
    environment: production
    env:
      env: prod
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Checkout
        uses: actions/checkout@v3        
      
      - name: Terraform Init
        id: init
        run: terraform init -reconfigure -backend-config="key=workflow-$env"

